@mixin padding( $item: 'multi', $prop: top, $val: 0 ){
	@if $item == 'multi'{
		padding: $val;
	}
	@else{
		padding-#{$prop}: $val;
	}
}

@mixin margin( $item: 'multi', $prop: top, $val: 0 ){
	@if $item == 'multi'{
		margin: $val;
	}
	@else{
		margin-#{$prop}: $val;
	}
}
@mixin ease-in-out( $val: 0.5s) {
	-webkit-transition: all $val ease-in-out;
	   -moz-transition: all $val ease-in-out;
		 -o-transition: all $val ease-in-out;
	 		transition: all $val ease-in-out;
}

@mixin trans-shadow( $val: rgba(255,255,255,.1) ){
	-webkit-box-shadow: inset 0 1px 0 $val;
	   -moz-box-shadow: inset 0 1px 0 $val;
		 -o-box-shadow: inset 0 1px 0 $val;
			box-shadow: inset 0 1px 0 $val;
}

@mixin shadow( $prop: 0px 0px 0px rgba(255,255,255,.1) , $inset: '' ){
	$shadow-value:  $prop;
	@if $inset == inset{
		$shadow-value: $inset $prop;
	} @else{
		$shadow-value: $prop;
	}
 	-webkit-box-shadow: $shadow-value;
	   -moz-box-shadow: $shadow-value;
		 -o-box-shadow: $shadow-value;
			box-shadow: $shadow-value;
}
// Flexbox Containers
@mixin flexbox{
	display: -webkit-box;
	display: -webkit-flex;
	display: -moz-flex;
	display: -ms-flex;
	display: flex;
}
%flexbox { @include flexbox; }

@mixin inline-flex {
	display: -webkit-inline-box;
	display: -webkit-inline-flex;
	display: -moz-inline-flex;
	display: -ms-inline-flexbox;
	display: inline-flex;
}
%inline-flex { @include inline-flex; }

// Flexbox Direction
@mixin flex-direction( $value: row ){
	@if $value == row-reverse{
		-webkit-box-direction: reverse;
		-webkit-box-orient: horizontal;
	} @else if $value == column{
		-webkit-box-direction: normal;
		-webkit-box-orient: vertical;
	} @else if $value == column-reverse {
		-webkit-box-direction: reverse;
		-webkit-box-orient: vertical;
	} @else{
		-webkit-box-direction: normal;
		-webkit-box-orient: horizontal;
	}
	-webkit-flex-direction: $value;
	   -moz-flex-direction: $value;
		-ms-flex-direction: $value;
			flex-direction: $value;
}

// Flexbox Wrap
@mixin flex-wrap( $value: nowrap ){
	-webkit-flex-wrap: $value;
	-moz-flex-wrap: $value;
	@if $value == nowrap {
		-ms-flex-wrap: none;
	} @else {
		-ms-flex-wrap: $value;
	}
	flex-wrap: $value;
}

// Flexbox Flow (shorthand)
@mixin flex-flow($values: (row nowrap)) {
	// No Webkit Box fallback.
	-webkit-flex-flow: $values;
	-moz-flex-flow: $values;
	-ms-flex-flow: $values;
	flex-flow: $values;
}

// Flexbox Grow
@mixin flex-grow( $int: 0 ){
	-webkit-box-flex: $int;
	-webkit-flex-grow: $int;
	-ms-flex-positive: $int;
	   -moz-flex-grow: $int;
			flex-grow: $int;
}

// Flexbox Shrink
@mixin flex-shrink($int: 1) {
	-webkit-flex-shrink: $int;
	-moz-flex-shrink: $int;
	-ms-flex-negative: $int;
	flex-shrink: $int;
}

// Flexbox Basis
@mixin flex-basis($value: auto) {
	-webkit-flex-basis: $value;
	-moz-flex-basis: $value;
	-ms-flex-preferred-size: $value;
	flex-basis: $value;
}

// Flexbox "Flex" (shorthand)
@mixin flex( $fg: 1, $fs: null, $fb: null ){
	$fg-boxflex: $fg;

	@if type-of($fg) == 'list' {
		$fg-boxflex: nth($fg, 1);
	}
	-webkit-box-flex: $fg-boxflex;
	-webkit-flex: $fg $fs $fb;
	-moz-box-flex: $fg-boxflex;
	-moz-flex: $fg $fs $fb;
	-ms-flex: $fg $fs $fb;
	flex: $fg $fs $fb;
}

// Flexbox Justify Content
@mixin justify-content($value: flex-start) {
 	@if $value == flex-start {
		-webkit-box-pack: start;
		-ms-flex-pack: start;
	} @else if $value == flex-end {
		-webkit-box-pack: end;
		-ms-flex-pack: end;
	} @else if $value == space-between {
		-webkit-box-pack: justify;
		-ms-flex-pack: justify;
	} @else {
		-webkit-box-pack: $value;
		-ms-flex-pack: $value;
	}
	-webkit-justify-content: $value;
	   -moz-justify-content: $value;
			justify-content: $value;
}
@mixin flex-just($value: flex-start) { @include justify-content($value); }

// Flexbox Align Item
@mixin align-items($value: stretch) {
	@if $value == flex-start{
		-webkit-box-align: start;
		-ms-box-align: start;
	} @else if $value == flex-end{
		-webkit-box-align: end;
		-ms-box-align: end;
	} @else {
		-webkit-box-align: $value;
		-ms-box-align: $value;
	}
	-webkit-align-items: $value;
	   -moz-align-items: $value;
			align-items: $value;
}

// Flexbox Align Self
// Values: auto | flex-start | flex-end | center | baseline | stretch
// Default: auto
// 
@mixin align-self($value: auto) {
	// No Webkit Box Fallback.
	-webkit-align-self: $value;
	-moz-align-self: $value;
	@if $value == flex-start {
		-ms-flex-item-align: start;
	} @else if $value == flex-end {
		-ms-flex-item-align: end;
	} @else {
		-ms-flex-item-align: $value;
	}
	align-self: $value;
}

// Flexbox Align Content
@mixin align-content($value: stretch) {
	// No Webkit Box Fallback.
	-webkit-align-content: $value;
	-moz-align-content: $value;
	@if $value == flex-start {
		-ms-flex-line-pack: start;
	} @else if $value == flex-end {
		-ms-flex-line-pack: end;
	} @else {
		-ms-flex-line-pack: $value;
	}
	align-content: $value;
}
// Transform
@mixin transform( $transition ){
	-webkit-transform: $transition;
	   -moz-transform: $transition;
		-ms-transform: $transition;
		 -o-transform: $transition;
			transform: $transition;
}

//Skew Y-axix
@mixin skewY($y){
	@include transform(skewY(#{$y}deg));
}
//Skew Y-axix
@mixin skewX( $x ){
	@include transform(skewX(#{$y}deg));
}
// skew
@mixin skew ($x, $y) {
   @include transform(skew(#{$x}deg, #{$y}deg));
}
// rotate
@mixin rotate ($deg) {
  @include transform(rotate(#{$deg}deg));
}
